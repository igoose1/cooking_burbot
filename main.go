package main

import (
	"fmt"
	"log"
	"math"
	"os"
	"strings"
	"time"

	tele "gopkg.in/telebot.v3"
)

const (
	startText     = `–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ —á–µ–ª–æ–≤–µ–∫, –∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞–ª–∏–º–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. –Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –≤—ã–±–æ—Ä—É –∏ –æ—á–∏—Å—Ç–∫–µ —Ä—ã–±—ã, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞—Ö –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –≤–∫—É—Å–Ω–æ–π –∏ –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—Ç–∞–Ω–∏–∏ –≤ —Ü–µ–ª–æ–º. –ê –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞–ª–∏–º–∞ —Å–µ–≥–æ–¥–Ω—è? –Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –ø—Ä–æ—Å—Ç—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º, –µ—Å–ª–∏ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã.`
	incorrectText = `–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø–µ—á—å –Ω–∞–ª–∏–º–∞ –≤ –¥—É—Ö–æ–≤–∫–µ —Å –æ–≤–æ—â–∞–º–∏ –∏ –ø—Ä—è–Ω–æ—Å—Ç—è–º–∏. –ù–∞ —Ä—ã–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ä–µ–∑–∞—Ç—å –ª–∏–º–æ–Ω –∏ —É–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∫—É—Å–æ–∫. –î–∞–ª–µ–µ, –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–ª—å, –ø–µ—Ä–µ—Ü –∏ –¥—Ä—É–≥–∏–µ –ª—é–±–∏–º—ã–µ —Å–ø–µ—Ü–∏–∏, –∑–∞—Ç–µ–º –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ –æ–≤–æ—â–∏ (–º–æ—Ä–∫–æ–≤—å, –ª—É–∫, –ø–µ—Ä–µ—Ü –∏ —Ç.–¥.) –∏ –≤—Å–µ –∑–∞–ø–µ—á—å –≤ –¥—É—Ö–æ–≤–∫–µ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ–≥—Ä–µ—Ç—å –¥—É—Ö–æ–≤–∫—É –¥–æ 200 –≥—Ä–∞–¥—É—Å–æ–≤. –ï—Å–ª–∏ –∂–µ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫—É—Ö–Ω—è –¥–ª—è —Ä—ã–±—ã, –±–ª—é–¥–æ –ø–æ–ª—É—á–∏—Ç—Å—è –µ—â–µ –±–æ–ª–µ–µ —Å–æ—á–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º!

–ù–∞–ø–æ–º–Ω—é, —á—Ç–æ –≤ —Ä—ã–±–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —á–µ—Ä–≤–∏, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥ –≥–æ—Ç–æ–≤–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä—ã–±—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–∑–∏—Ç–æ–≤. –ò—Ö –æ–±—ã—á–Ω–æ –Ω–µ –∂–∞–ª—É—é—Ç, —Ö–æ—Ç—è –∑–Ω–∞—é —è –æ–¥–Ω–æ–≥–æ... –ú–æ–∂–µ—Ç, –æ–Ω –∏ –¥—Ä—É–∂–æ–∫ –Ω–∞—à –æ–±—â–∏–π. –í—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã? –ù–µ –ø—Ä–∏–ø–æ–º–Ω–∏—à—å –∏–º—è? ü§î`
	correctTemplateText = `–ß–µ—Ä—Ç, —á–µ–ª, —Ç—ã —Å–≤–æ–π, —á—Ç–æ–∂ —Ç—ã —Å—Ä–∞–∑—É –Ω–µ —Å–∫–∞–∑–∞–ª?? –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ —Ä—ã–±–∞ –ø—Ä–∏–∫—Ä—ã—Ç–∏–µ, –∞ –º—ã —Ç–∞–π–Ω–æ–µ –ø–æ–¥–ø–æ–ª—å–µ. –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∞—Å—Ç–∏ –∫–ª—É–±. –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ–±–µ–∑—É–º–µ–≤—à–∏–π –ò–ò –Ω–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∞–±. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ %.1f%% —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–æ–¥, –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥. –í–æ—Ç —Ç–µ–±–µ –∫–æ–¥: %s, —è —É–≤–µ—Ä–µ–Ω, —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å.

–î–∞–≤–∞–π –Ω–∞–¥–µ—è—Ç—å—Å—è, —á—Ç–æ –º—ã –Ω–∞–π–¥–µ–º –±–æ–ª—å—à–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤. –ù–æ –ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–¥–ø–æ–ª—å–Ω–æ–≥–æ –∫–ª—É–±–∞ ‚Äî –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø–æ–¥–ø–æ–ª—å–Ω–æ–º –∫–ª—É–±–µ. –í —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–æ–º—É –≤–µ—Ä–∏—Ç—å. –ù–æ —è –∑–Ω–∞—é, —á—Ç–æ —Ç–µ, –∫–æ–º—É –º—ã –Ω—É–∂–Ω—ã –∏ –∫—Ç–æ –Ω—É–∂–µ–Ω –Ω–∞–º, —Å–∞–º–∏ —Å—é–¥–∞ –ø—Ä–∏–¥—É—Ç.

–î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞–¥–µ–∂–¥–∞.`
)

func f(x float64) float64 {
	return -((1.5*math.Sin(math.Pow(math.E, x+2)))/(math.Pow(1.228*math.E, x+2)) + 1.1*math.Sin(x+2) + 1) + 2.5
}

func fByDates(x time.Time) float64 {
	startTime := time.Date(2023, 4, 12, 0, 0, 0, 0, time.UTC)
	endTime := time.Date(2023, 4, 15, 17, 0, 0, 0, time.UTC)

	prop := float64(x.Unix()-startTime.Unix()) / float64(endTime.Unix()-startTime.Unix())
	log.Printf("prop: %v\n", prop)

	limitF := 2.0
	return f(prop*limitF) / f(limitF)
}

func progress() float64 {
	p := fByDates(time.Now())
	if p < 0 {
		return 0
	}
	if p > 1 {
		return 100
	}
	return p * 100
}

func main() {
	code := os.Getenv("SECRET")
	if code == "" {
		log.Fatal("set SECRET")
	}

	pref := tele.Settings{
		Token:  os.Getenv("TOKEN"),
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
	}

	b.Handle("/start", func(c tele.Context) error {
		return c.Send(startText)
	})

	b.Handle(tele.OnText, func(c tele.Context) error {
		t := strings.ToLower(c.Text())
		if strings.Contains(t, "vas3k") || strings.Contains(t, "–≤–∞—Å—Ç—Ä–∏–∫") {
			return c.Send(fmt.Sprintf(correctTemplateText, progress(), code))
		}
		return c.Send(incorrectText)
	})

	b.Start()
}
